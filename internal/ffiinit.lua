ffi = require("ffi")

ffi.cdef[[
	typedef struct {
		uint8_t kind;
		union {
			const char* asString;
			double asNumber;
		};
	} any_type;
	void callback_test(void (*foo)());
	void set_callback_handler(void (*handler)(const char* name));
	void call_callback(const char* name);
	double pop_arg_type();
	double pop_arg_number();
	const char* pop_arg_string();
	void push_arg_number(double value);
	void push_arg_string(const char* value);
	double callback_get_return();
	double callback_get_return_number();
	const char* callback_get_return_string();
	void callback_return_number(double value);
	void callback_return_string(const char* value);
	void out_doubles_push(double value);
	bool out_doubles_empty();
	double out_doubles_pop();
	void out_strings_push(const char* value);
	bool out_strings_empty();
	const char* out_strings_pop();
	void discard_arg();
	void clean_strings();
]]
Apollo = ffi.load('Apollo.dll')

ffi.cdef[[
	double getReturnNumber();
	const char* getReturnString();
]]

ffi.cdef[[
	double sound_play(int sound);
	void sound_loop(int sound);
	void sound_stop(int sound);
	double sound_exists(int sound);
	double sound_isplaying(int sound);
	double sound_play_ext(int sound, float pitch, float volume);
	double sound_add(const char* fname);
	const char* sound_get_name(double sound);
	double sound_get_id(double sound);
	double sprite_add(const char* fname, double frames, double xorigin, double yorigin);
	void sprite_assign(int to, int from);
	const char* sprite_get_name(int sprite);
	double sprite_get_number(int sprite);
	double sprite_get_width(int sprite);
	double sprite_get_height(int sprite);
	double sprite_get_xoffset(int sprite);
	double sprite_get_yoffset(int sprite);
	double sprite_get_bbox_bottom(int sprite);
	double sprite_get_bbox_left(int sprite);
	double sprite_get_bbox_right(int sprite);
	double sprite_get_bbox_top(int sprite);
	double sprite_exists(double id);
	void sprite_delete(double id);
	double sprite_create_from_surface(double index, double x, double y, double w, double h, double removeback, double smooth, double xorig, double yorig);
	void sprite_set_offset(double id, double xorig, double yorig);
	void sprite_collision_mask(double id, double sepmasks, double bboxmode, double bbleft, double bbtop, double bbright, double bbbottom, double kind, double tolerance);
	void sprite_set_bbox_mode(double id, double mode);
	double sprite_get_bbox_mode(double id);
	void sprite_add_from_surface(double index, double surface, double x, double y, double w, double h, double removeback, double smooth);
	double sprite_duplicate(double index);
	void sprite_merge(double ind1, double ind2);
	void sprite_save(double ind, double subimg, const char* fname);
	void sprite_save_strip(double ind, const char* fname);
	double object_get_sprite(int object);
	float object_get_depth(int object);
	double object_get_visible(int object);
	double object_get_parent(int object);
	const char* object_get_name(int object);
	void object_set_sprite(int object, int sprite);
	void object_set_depth(int object, float depth);
	void object_set_visible(int object, int visible);
	void object_set_parent(int object, int parent);
	void GML_object_get_ancestors(double object);
	double object_exists(int object);
	double object_add();
	void object_add_event_bind(double object, double event);
	void GML_objectgroup_add(int group, int object);
	void objectgroup_find_matching(double id);
	void objectgroup_find_matching_op(double id);
	double GML_objectgroup_nearest(int group, float x, float y);
	double GML_objectgroup_furthest(int group, float x, float y);
	double objectgroup_create();
	double objectgroup_furthest(double group, double x, double y);
	double objectgroup_nearest(double group, double x, double y);
	void objectgroup_find_all(double group);
	void objectgroup_list(double group);
	double objectgroup_meeting(double id, double x, double y, double group);
	double objectgroup_get_colliding(double id, double x, double y, double group);
	void objectgroup_remove(double group, double object);
	double objectgroup_find(double group, double index);
	double objectgroup_count(double group);
	double instance_create(double x, double y, double object);
	void instance_destroy(double instance, double event);
	double instance_exists(double instance);
	double get_object_index(double instance);
	double object_is_ancestor(double child, double parent);
	double read_alarm(double id, double alarm);
	void write_alarm(double id, double alarm, double value);
	void instance_find_matching(double object);
	void instance_find_matching_op(double object);
	void instance_find_all(double object);
	void instance_get_colliding(double instance, double x, double y, double object);
	double map_instance_collision(double instance, double x, double y);
	void variable_global_set(const char* name, any_type* value);
	int variable_global_get(const char* name);
	void variable_instance_set(double id, const char* name, any_type* value);
	int variable_instance_get(double id, const char* name);
	void GML_instance_dump_variables(double instance);
	double instance_number(double obj);
	double instance_position(float x, float y, int obj);
	double instance_nearest(float x, float y, int obj);
	double instance_furthest(float x, float y, int obj);
	double instance_place(long long instance, float x, float y, int obj);
	double place_meeting(long long instance, float x, float y, int obj);
	double instance_find(int obj, int index);
	double instance_get_subimage(long long instance);
	void draw_self(long long instance);
	void draw_sprite(int sprite_index, int image_index, float x, float y);
	void draw_sprite_part(int sprite_index, int image_index, float left, float top, float width, float height, float x, float y);
	void draw_sprite_ext(int sprite_index, int image_index, float x, float y, float xscale, float yscale, float angle, int colour, float alpha);
	void draw_sprite_pos(int sprite, int subimg, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float alpha);
	void draw_sprite_part_ext(double sprite_index, double image_index, double left, double top, double width, double height, double x, double y, double xscale, double yscale, double col, double alpha);
	void draw_sprite_general(double sprite, double subimg, double left, double top, double width, double height, double x, double y, double xscale, double yscale, double rot, double c1, double c2, double c3, double c4, double alpha);
	void draw_set_halign(int type);
	void draw_set_valign(int type);
	void draw_text(float x, float y, const char* text);
	void draw_text_transformed(float x, float y, const char* text, float xscale, float yscale, float angle);
	void draw_text_color(float x, float y, const char* text, int colTL, int colTR, int colBR, int colBL, float alpha);
	void draw_text_transformed_color(float x, float y, const char* text, float xscale, float yscale, float angle, int colTL, int colTR, int colBR, int colBL, float alpha);
	void draw_text_ext_color(float x, float y, const char* text, int linesep, int linewidth, int colTL, int colTR, int colBR, int colBL, float alpha);
	void draw_text_ext_transformed_color(float x, float y, const char* text, int linesep, int linewidth, float xscale, float yscale, float angle, int colTL, int colTR, int colBR, int colBL, float alpha);
	double string_width(const char* text);
	double string_height(const char* text);
	double string_width_ext(const char* text, int sep, int w);
	double string_height_ext(const char* text, int sep, int w);
	void draw_ctext(double x, double y, const char* text);
	void draw_set_text(double colour, double font, double halign, double valign);
	double font_add(const char* name, double size, double bold, double italic, double first, double last);
	double font_add_sprite(double spr, double first, double prop, double sep);
	double font_add_sprite_ext(double spr, const char* map, double prop, double sep);
	void font_delete(double id);
	void draw_point(float x1, float y1);
	void draw_point_ext(float x1, float y1, long long c1);
	void draw_line(float x1, float y1, float x2, float y2);
	void draw_line_width(float x1, float y1, float x2, float y2, float width);
	void draw_rectangle(float x1, float y1, float x2, float y2, int outline);
	void draw_triangle(float x1, float y1, float x2, float y2, float x3, float y3, int outline);
	void draw_circle(float x, float y, float r, int outline);
	void draw_ellipse(float x1, float y1, float x2, float y2, int outline);
	void draw_set_blend_mode(int blendmode);
	void draw_set_font(int font_index);
	void draw_set_colour(long long color);
	void draw_set_alpha(float alpha);
	double draw_get_colour();
	float draw_get_alpha();
	void draw_set_blend_mode_ext(int src, int dest);
	void draw_set_circle_precision(int precision);
	int make_color_rgb(int red, int green, int blue);
	double make_color_hsv(int hue, int saturation, int value);
	int color_get_red(int color);
	int color_get_green(int color);
	int color_get_blue(int color);
	double color_get_hue(long long color);
	double color_get_saturation(long long color);
	double color_get_value(long long color);
	double merge_color(long long col1, long long col2, float amount);
	double surface_create(int width, int height);
	void surface_resize(int id, int width, int height);
	void surface_free(int id);
	double surface_exists(int id);
	void surface_copy(int destination, int x, int y, int source);
	void surface_copy_part(int destination, int x, int y, int source, int xs, int ys, int ws, int hs);
	double surface_get_width(int id);
	double surface_get_height(int id);
	double surface_getpixel(int id, int x, int y);
	double surface_getpixel_ext(int id, int x, int y);
	void surface_set_target(int id);
	void surface_reset_target();
	void draw_surface(int id, float x, float y);
	void draw_surface_ext(int id, float x, float y, float xscale, float yscale, float rot, float col, float alpha);
	void draw_surface_general(double id, double left, double top, double w, double h, double x, double y, double xscale, double yscale, double rot, double c1, double c2, double c3, double c4, double alpha);
	void draw_surface_part(int id, float xo, float yo, float w, float h, float x, float y);
	void draw_surface_part_ext(int id, float xo, float yo, float w, float h, float x, float y, float xscale, float yscale, int color, float alpha);
	void draw_surface_stretched(int id, float x, float y, float width, float height);
	void draw_surface_stretched_ext(int id, float x, float y, float width, float height, int col, float alpha);
	void draw_primitive_begin(int kind);
	void draw_vertex(float x, float y);
	void draw_vertex_color(float x, float y, long long col, float alpha);
	void draw_primitive_end();
	void draw_primitive_begin_texture(int kind, long long texture);
	void draw_vertex_texture(float x, float y, float xtex, float ytex);
	void draw_vertex_texture_color(float x, float y, float xtex, float ytex, long long col, float alpha);
	void draw_damage(float x, float y, float damage, int critical, int color);
	void draw_clear(long long col);
	void draw_clear_alpha(long long col, float alpha);
	double part_system_exists(int index);
	double part_system_create();
	void part_system_clear(int index);
	void part_system_depth(int index, int depth);
	void part_system_position(int index, float x, float y);
	void part_system_destroy(int index);
	void part_particles_clear(int index);
	double part_particles_count(int index);
	void part_system_automatic_update(int index, int update);
	void part_system_automatic_draw(int index, int draw);
	void part_system_update(int index);
	void part_system_drawit(int index);
	void part_system_draw_order(int index, int oldtonew);
	void part_particles_create_color(int index, float x, float y, int type, long long color, int count);
	void part_particles_create(int index, float x, float y, int type, int count);
	double part_emitter_create(int ps);
	void part_emitter_burst(int ps, int index, int type, int number);
	double part_emitter_exists(int ps, int index);
	void part_emitter_clear(int ps, int index);
	void part_emitter_region(int ps, int index, float xmin, float ymin, float xmax, float ymax, int shape, int type);
	void part_emitter_stream(int ps, int index, int type, int number);
	void part_emitter_destroy(int ps, int index);
	void part_emitter_destroy_all(int ps);
	double part_type_exists(int index);
	double part_type_create();
	void part_type_destroy(int index);
	void part_type_clear(int index);
	void part_type_shape(int index, int shape);
	void part_type_sprite(int index, int sprite, int animate, int stretch, int random);
	void part_type_speed(int index, float min, float max, float increase, float wiggle);
	void part_type_scale(int index, float xscale, float yscale);
	void part_type_size(int index, float min, float max, float increase, float wiggle);
	void part_type_direction(int index, float min, float max, float increase, float wiggle);
	void part_type_gravity(int index, float amount, float direction);
	void part_type_orientation(int index, float min, float max, float increase, float wiggle, int relative);
	void part_type_life(int index, int min, int max);
	void part_type_step(int index, int number, int type);
	void part_type_death(int index, int number, int type);
	void part_type_color_mix(int index, long long col1, long long col2);
	void part_type_color_rgb(int index, int rmin, int gmin, int bmin, int rmax, int gmax, int bmax);
	void part_type_color_hsv(int index, int hmin, int smin, int vmin, int hmax, int smax, int vmax);
	void part_type_color1(int index, long long col1);
	void part_type_color2(int index, long long col1, long long col2);
	void part_type_color3(int index, long long col1, long long col2, long long col3);
	void part_type_alpha1(int index, float alpha1);
	void part_type_alpha2(int index, float alpha1, float alpha2);
	void part_type_alpha3(int index, float alpha1, float alpha2, float alpha3);
	void part_type_blend(int index, int additive);
	double ds_list_create();
	void ds_list_destroy(double list);
	double ds_list_size(double list);
	double ds_list_find_index(double list, any_type* value);
	int ds_list_find_value(double list, double index);
	void ds_list_add(double list, any_type* value);
	void ds_list_replace(double list, double index, any_type* value);
	void ds_list_insert(double list, double index, any_type* value);
	void ds_list_delete(double list, double index);
	double ds_map_create();
	void ds_map_destroy(double map);
	void ds_map_add(double map, any_type* key, any_type* value);
	int ds_map_find_value(double map, any_type* key);
	void ds_map_replace(double map, any_type* key, any_type* value);
	void ds_map_delete(double map, any_type* key);
	double ds_map_exists(double map, any_type* key);
	void ds_map_get_keys(double map);
	double ds_exists(double id, double type);
	double fire_bullet(long long self, float x, float y, float direction, int distance, float damage, int sprite, int properties);
	double fire_explosion(long long self, float x, float y, float width, float height, float damage, int sprite, int hitSprite, int properties);
	double bullet_trace(long long self, float x, float y, float direction, int distance);
	double fire_bullet_parentless(float x, float y, float direction, int distance, float damage, const char* team, int sprite, int properties);
	double fire_explosion_parentless(float x, float y, float width, float height, float damage, const char* team, int sprite, int hitSprite, int properties);
	void remove_buff(double id, double buff);
	double has_buff(double id, double buff);
	double get_buff_time(double id, double buff);
	void get_buffs(double id);
	void apply_buff(double id, double buff, double time);
	double player_update_heaven_cracker(long long player, double damage);
	double player_set_custom_activity_state(long long player, double index, int sprite, double speed, int scale, int type, int ground);
	double actor_is_classic(double object);
	double actor_is_boss(double object);
	double control_check_state(long long playerinst, int control);
	const char* control_string(int playerindex, int control);
	const char* string_joy(int control, int playerindex);
	const char* string_key(int control);
	double player_get_gamepad_index(double player);
	double mouse_wheel_value();
	int keyboard_check(int key);
	double keyboard_check_pressed(int key);
	double keyboard_check_released(int key);
	double mouse_check_button(int button);
	double mouse_check_button_pressed(int button);
	double mouse_check_button_released(int button);
	double device_mouse_x_to_gui(int device);
	double device_mouse_y_to_gui(int device);
	double player_get_input_type(int index);
	const char* gamepad_get_description(int index);
	double gamepad_button_value(int index, int button);
	float gamepad_axis_value(int index, int axis);
	double gamepad_button_check(int index, int button);
	double gamepad_button_check_pressed(int index, int button);
	double gamepad_button_check_released(int index, int button);
	double mouse_get_screen_x();
	double mouse_get_screen_y();
	double keyboard_check_state(double thing1);
	double gamepad_button_check_state(double thing1, double thing2);
	double mouse_check_button_state(double thing1);
	void console_add_message(const char* message, int colour, int meta);
	void array_open(const char* name);
	void array_open_instance(double id, const char* name);
	int array_read_1(double x);
	int array_read_2(double x, double y);
	void array_write_1(double x, any_type* value);
	void array_write_2(double x, double y, any_type* value);
	void array_close();
	double array_length();
	double array_length_sub(double index);
	void array_global_write_1(const char* name, any_type* value, double x);
	void array_global_write_2(const char* name, any_type* value, double x, double y);
	int array_global_read_1(const char* name, double x);
	int array_global_read_2(const char* name, double x, double y);
	double asset_get_index(const char* name);
	void hook_set_active(const char* hook, double active);
	double random_get_seed();
	void random_set_seed(double seed);
	double random(double _v);
	int irandom(int _range);
	double random_range(double _base, double _end);
	int irandom_range(int _base, int _end);
	void error_warn(const char* message, double nothing);
	void error_alert(const char* message, double priority);
	void error_error(const char* message, double nothing);
	void log_text(const char* message);
	void log_write(const char* message, const char* name, double noappend);
	double map_rect_collision(double x1, double y1, double x2, double y2);
	double map_point_collision(double x, double y);
	double collision_rectangle(double x1, double y1, double x2, double y2, double obj, double prec, double notme);
	double collision_rectangle_list(double x1, double y1, double x2, double y2, double obj, double prec, double notme);
	double collision_ellipse(double x1, double y1, double x2, double y2, double obj, double prec, double notme);
	double collision_ellipse_list(double x1, double y1, double x2, double y2, double obj, double prec, double notme);
	double collision_line(double x1, double y1, double x2, double y2, double obj, double prec, double notme);
	double collision_line_list(double x1, double y1, double x2, double y2, double obj, double prec, double notme);
	double collision_point(double x, double y, double obj, double prec, double notme);
	double collision_point_list(double x, double y, double obj, double prec, double notme);
	double camera_get_view_width(double camera);
	double camera_get_view_height(double camera);
	double camera_get_view_x(double camera);
	double camera_get_view_y(double camera);
	double camera_get_view_angle(double camera);
	double camera_set_view_size(double camera, double width, double height);
	double camera_set_view_pos(double camera, double x, double y);
	double camera_set_view_angle(double camera, double angle);
	double view_get_camera(double index);
	void room_set_width(double index, double width);
	void room_set_height(double index, double height);
	double room_add();
	double room_duplicate(double baseRoom);
	double room_exists(double index);
	const char* room_get_name(double index);
	double room_instance_create(double index, double x, double y, double gmObject);
	void resource_register_id(double type, double id, const char* origin, const char* name);
	void writebyte(double value);
	double readbyte();
	void writedouble(double value);
	double readdouble();
	void writeint(double value);
	double readint();
	void writeshort(double value);
	double readshort();
	void writestring(const char* value);
	const char* readstring();
	void writeobject(double type, double value);
	double readobject(double type);
	void writesprite(double type, double value);
	double readsprite(double type);
	void writesound(double type, double value);
	double readsound(double type);
	double net_packet_begin();
	void net_packet_end(double oldbuffer, double type, double target);
	void net_packet_discard(double oldbuffer);
	double net_find_object(double gmobj, double m_id);
	void stage_goto(double stage);
	double stage_load(const char* path);
	double item_roll(double pool);
	void item_drop(double instance, double type);
	void item_set_cooldown(double item, float cooldown);
	float item_get_cooldown(double item);
	void item_set_log(double object, double log);
	double item_pool_add(double pool, double item);
	double item_pool_remove(double pool, double item);
	double item_pool_has(double pool, double item);
	void item_pool_set_ignore_droppable(double pool, double ignore);
	double item_pool_get_ignore_droppable(double pool);
	void item_pool_set_ignore_enigma(double pool, double ignore);
	double item_pool_get_ignore_enigma(double pool);
	void item_pool_set_weighted(double pool, double weighted);
	double item_pool_get_weighted(double pool);
	void item_pool_set_weight(double pool, double item, double weight);
	double item_pool_get_weight(double pool, double item);
	void init_item(double id, const char* name, double object, const char* context);
	void item_enable_callback(double item, double callback);
	void item_set_droppable(double item, double droppable);
	double item_get_droppable(double item);
	void item_pool_list(double pool);
	void skill_cooldown(int instance, int index);
	void skill_set(int instance, int index, const char* name, const char* desc, int cooldown);
	void skill_set_icon(int instance, int index, int sprite, int subimage);
	void class_set_unlocked(int id, int unlocked);
	void class_set_active(int id, int active);
	double class_add();
	void artifact_set_unlocked(double id, double unlocked);
	double artifact_get_unlocked(double id);
	double artifact_get_active(double id);
	void artifact_set_active(double id, double active);
	double artifact_add(const char* name, const char* context);
	void achievement_progress(double id, double inc);
	void achievement_add(double id, const char* name, const char* context);
	void init_enemy(double enemy, double log);
	void enemy_enable_callback(double enemy, double callback);
	double get_stats_multiplier(int stat);
	double enemy_set_custom_activity_state(double instance, double skill, double sprite, double speed, double type, double cooldown, double resetSpeed);
	double enemy_set_elite_1(double enemy);
	double enemy_set_elite_2(double enemy, double type);
	double enemy_set_blighted_1(double enemy);
	double enemy_set_blighted_2(double enemy, double type);
	double alloc_elite_type(const char* origin, const char* name);
	void elite_generate_palettes(any_type* target);
	void player_item_remove(double id, double item, double count);
	void player_item_give(double id, double item, double count);
	double player_item_count(double id, double item);
	double player_get_use_item(double id);
	void player_set_use_item(double id, double item);
	void use_item(double player, double item, double cooldown);
	void player_item_hud_set_sprite(double player, double object, double sprite);
	void player_item_hud_set_text(double player, double object, const char* text);
	void file_unsandbox(const char* from, const char* to);
	double file_exists(const char* name);
	double file_exists_ns(const char* name);
	void gpu_set_fog(double enable, double color, double start, double end);
	void gpu_set_blendmode(double mode);
	void gpu_set_blendmode_ext(double src, double dest);
	void gpu_set_blendmode_ext_sepalpha(double src, double dest, double alphasrc, double alphadest);
	void gpu_set_colorwriteenable(double red, double green, double blue, double alpha);
	double alloc_monster_log(const char* name, const char* origin);
	double alloc_monster_card(const char* name, const char* origin, double object);
]]
GML = ffi.C
